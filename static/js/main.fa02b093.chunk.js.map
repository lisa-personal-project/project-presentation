{"version":3,"sources":["static/raw.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","injectSheet","styles","React","useState","checked","setChecked","handleChange","console","log","className","Button","style","width","height","display","flexDirection","flexWrap","justifyContent","alignItems","alignContent","onClick","fontSize","fontWeigth","color","Slide","direction","in","mountOnEnter","unmountOnExit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4JAAAA,EAAOC,QAAU,IAA0B,iC,6JC2F5BC,kBAAYC,IAAZD,EA7Ef,WAAgB,IAAD,EACiBE,IAAMC,UAAS,GADhC,mBACNC,EADM,KACGC,EADH,KAEPC,EAAe,WACnBC,QAAQC,IAAIJ,GACZC,GAAYD,IAEd,OACE,yBAAKK,UAAU,QAAQL,GACrB,kBAACM,EAAA,EAAD,CAAQC,MAAO,CAACC,MAAO,QAASC,OAAQ,QACtCC,QAAS,OACTC,cAAe,SACfC,SAAU,SACVC,eAAgB,eAChBC,WAAY,SACZC,aAAc,WACbC,QAAS,kBAAMd,MAClB,yBAAKG,UAAU,aAAaE,MAAO,CACjCG,QAAS,kBACTC,cAAe,oBACfC,SAAU,SACVC,eAAgB,eAChBC,WAAY,SACZC,aAAc,YAGZ,yBAAKR,MAAO,CAAEC,MAAO,QAASC,OAAQ,OAAQQ,SAAU,GAAIC,WAAY,IAAKC,MAAO,UAApF,oBACA,6BACE,kBAAC,IAAD,CAAgBZ,MAAO,CAACY,MAAM,cAIpC,kBAACC,EAAA,EAAD,CAAOC,UAAU,KAAKC,GAAItB,EAASuB,cAAY,EAACC,eAAa,GAC3D,kBAAClB,EAAA,EAAD,CAAQD,UAAU,aAAaE,MAAO,CACpCG,QAAS,OACTC,cAAe,SACfC,SAAU,SACVC,eAAgB,eAChBC,WAAY,SACZC,aAAc,WACbC,QAAS,kBAAMd,MAChB,4BAASK,MAAO,CACdG,QAAS,OACTC,cAAe,SACfC,SAAU,SACVC,eAAgB,eAChBC,WAAY,SACZC,aAAc,YAEd,kBAACT,EAAA,EAAD,CAAQC,MAAO,CACbG,QAAS,OACTC,cAAe,SACfC,SAAU,SACVC,eAAgB,eAChBC,WAAY,SACZC,aAAc,WACbC,QAAS,kBAAMd,MAChB,yBAAKK,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQQ,SAAU,GAAIC,WAAY,IAAKC,MAAO,UAAnF,oBACA,gnFC3DMM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.fa02b093.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/raw.a945d858.jpg\";","import React from 'react';\nimport injectSheet from \"react-jss\";\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport logo from './static/raw.jpg';\n\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Slide from '@material-ui/core/Slide';\n\nimport styles from './App.css';\n\nfunction App() {\n  const [checked, setChecked] = React.useState(false);\n  const handleChange = () => {\n    console.log(checked);\n    setChecked(!checked);\n  };\n  return (\n    <div className=\"App\">{!checked &&\n      <Button style={{width: \"100vw\", height: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        flexWrap: \"nowrap\",\n        justifyContent: \"space-around\",\n        alignItems: \"center\",\n        alignContent: \"stretch\",\n      }} onClick={() => handleChange()}>\n      <div className=\"App-header\" style={{\n        display: \"flex !important\",\n        flexDirection: \"column !important\",\n        flexWrap: \"nowrap\",\n        justifyContent: \"space-around\",\n        alignItems: \"center\",\n        alignContent: \"stretch\"\n      }}>\n  \n          <div style={{ width: \"100vw\", height: \"70vh\", fontSize: 80, fontWeigth: 700, color: \"white\" }}> DEVELOPPEUR WEB</div>\n          <div>\n            <ExpandMoreIcon style={{color:\"white\"}}/>\n          </div>\n          </div>\n          </Button>}\n      <Slide direction=\"up\" in={checked} mountOnEnter unmountOnExit>\n        <Button className=\"App-header\" style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          flexWrap: \"nowrap\",\n          justifyContent: \"space-around\",\n          alignItems: \"center\",\n          alignContent: \"stretch\"\n        }} onClick={() => handleChange()}>\n          <header  style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            flexWrap: \"nowrap\",\n            justifyContent: \"space-around\",\n            alignItems: \"center\",\n            alignContent: \"stretch\"\n          }}>\n            <Button style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              flexWrap: \"nowrap\",\n              justifyContent: \"space-around\",\n              alignItems: \"center\",\n              alignContent: \"stretch\"\n            }} onClick={() => handleChange()}>\n              <div style={{ width: \"70vw\", height: \"70vh\", fontSize: 80, fontWeigth: 700, color: \"white\" }}> DEVELOPPEUR WEB</div>\n              <div>\n              En quoi consiste le développement web  ?\n              Le développement web repose sur l’utilisation des langages (HTML/CSS, JavaScript, PHP…) pour écrire des programmes qui sont ensuite exécutés par les ordinateurs. Les instructions sont mises en place sur Internet et sont effectuées sur des serveurs. En fonction des besoins des propriétaires du site ou des pages web, ces dernières peuvent être constituées uniquement de textes et d’éléments graphiques ressemblant à un document ou être interactives en affichant des informations qui évoluent (panier d’achat, par exemple).\n              \n              Le métier du développeur web\n              Le développeur web s’occupe de la réalisation de l’ensemble des fonctionnalités techniques d’un site Internet ou d’une application web. En fonction des exigences présentées dans un cahier des charges précis, ce spécialiste analyse les besoins et définit la solution technique adaptée. Il développe ensuite les fonctionnalités du site ou de l’application web en rédigeant des lignes de code. Ses missions incluent également le diagnostic et la résolution de problèmes détectés sur un site déjà en ligne. La polyvalence, l’autonomie, la capacité d’adaptation ainsi que le respect des délais figurent parmi les qualités de ce professionnel. \n              \n              Quelles sont les formations adéquates pour devenir développeur web  ?\n              Différentes formations pour développeur web sont dispensées au sein des grandes écoles. L’IESA multimédia propose ainsi un Bac+3 en développement web, avec le Bachelor Chef de projet multimédia, accessible aux Bacheliers ou aux titulaires d’un Bac+1 ou Bac+2. La spécialisation en développement web s’effectue lors de la 3ème année.\n              \n              Pour obtenir un Bac+5 en développement web, les candidats doivent poursuivre deux années d’études supplémentaires pour acquérir des compétences techniques plus pointues dans ce domaine. À l’IESA multimédia, ils peuvent continuer leur cursus avec le Mastère Expert en stratégie digitale avec une spécialisation en direction de projet et développement web. Délivrée sur deux années, cette formation se déroule en alternance, sur la base de 4 jours en entreprise et 1 journée à l’école. Avec des périodes intensives dédiées à des projets de groupe : création d’un site en responsive design, développement d’une application mobile, compétition interclasses…\n              </div>\n            </Button>\n          </header>\n        </Button>\n      </Slide>\n    </div>\n  );\n}\n\nexport default injectSheet(styles)(App);\n\n\n\n/**\n *  <div style={{ flexGrow: 1 }}>\n          <Grid container spacing={3}>\n            <Grid item xs={12} style={{ width: \"70vw\", height: \"20vh\" }}>\n              <div className={{\n                padding: \"theme.spacing(2)\",\n                backgroundColor: \"#282c34\"\n              }}>DEVELOPPER WER</div>\n            </Grid>\n            <Grid item xs={6}>\n              <div className={{\n                padding: \"theme.spacing(2)\",\n                backgroundColor: \"#282c34\"\n              }}>xs=6</div>\n            </Grid>\n            <Grid item xs={6}>\n              <div className={{\n                padding: \"theme.spacing(2)\",\n                backgroundColor: \"#282c34\"\n              }}>xs=6</div>\n            </Grid>\n            <Grid item xs={3}>\n              <div className={{\n                padding: \"theme.spacing(2)\",\n                backgroundColor: \"#282c34\"\n              }}>xs=3</div>\n            </Grid>\n            <Grid item xs={3}>\n              <div className={{\n                padding: \"theme.spacing(2)\",\n                backgroundColor: \"#282c34\"\n              }}>xs=3</div>\n            </Grid>\n            <Grid item xs={3}>\n              <div className={{\n                padding: \"theme.spacing(2)\",\n                backgroundColor: \"#282c34\"\n              }}>xs=3</div>\n            </Grid>\n            <Grid item xs={3}>\n              <div className={{\n                padding: \"theme.spacing(2)\",\n                color: \"#282c34\"\n              }}>xs=3</div>\n            </Grid>\n          </Grid>\n        </div>\n */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}